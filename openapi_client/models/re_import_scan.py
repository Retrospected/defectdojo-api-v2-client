# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReImportScan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scan_date': 'date',
        'minimum_severity': 'str',
        'active': 'bool',
        'verified': 'bool',
        'scan_type': 'str',
        'tags': 'list[str]',
        'file': 'str',
        'test': 'int'
    }

    attribute_map = {
        'scan_date': 'scan_date',
        'minimum_severity': 'minimum_severity',
        'active': 'active',
        'verified': 'verified',
        'scan_type': 'scan_type',
        'tags': 'tags',
        'file': 'file',
        'test': 'test'
    }

    def __init__(self, scan_date=None, minimum_severity='Info', active=True, verified=True, scan_type=None, tags=None, file=None, test=None):  # noqa: E501
        """ReImportScan - a model defined in OpenAPI"""  # noqa: E501

        self._scan_date = None
        self._minimum_severity = None
        self._active = None
        self._verified = None
        self._scan_type = None
        self._tags = None
        self._file = None
        self._test = None
        self.discriminator = None

        self.scan_date = scan_date
        if minimum_severity is not None:
            self.minimum_severity = minimum_severity
        if active is not None:
            self.active = active
        if verified is not None:
            self.verified = verified
        self.scan_type = scan_type
        if tags is not None:
            self.tags = tags
        if file is not None:
            self.file = file
        self.test = test

    @property
    def scan_date(self):
        """Gets the scan_date of this ReImportScan.  # noqa: E501


        :return: The scan_date of this ReImportScan.  # noqa: E501
        :rtype: date
        """
        return self._scan_date

    @scan_date.setter
    def scan_date(self, scan_date):
        """Sets the scan_date of this ReImportScan.


        :param scan_date: The scan_date of this ReImportScan.  # noqa: E501
        :type: date
        """
        if scan_date is None:
            raise ValueError("Invalid value for `scan_date`, must not be `None`")  # noqa: E501

        self._scan_date = scan_date

    @property
    def minimum_severity(self):
        """Gets the minimum_severity of this ReImportScan.  # noqa: E501


        :return: The minimum_severity of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._minimum_severity

    @minimum_severity.setter
    def minimum_severity(self, minimum_severity):
        """Sets the minimum_severity of this ReImportScan.


        :param minimum_severity: The minimum_severity of this ReImportScan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Info", "Low", "Medium", "High", "Critical"]  # noqa: E501
        if minimum_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(minimum_severity, allowed_values)
            )

        self._minimum_severity = minimum_severity

    @property
    def active(self):
        """Gets the active of this ReImportScan.  # noqa: E501


        :return: The active of this ReImportScan.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReImportScan.


        :param active: The active of this ReImportScan.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def verified(self):
        """Gets the verified of this ReImportScan.  # noqa: E501


        :return: The verified of this ReImportScan.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this ReImportScan.


        :param verified: The verified of this ReImportScan.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def scan_type(self):
        """Gets the scan_type of this ReImportScan.  # noqa: E501


        :return: The scan_type of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this ReImportScan.


        :param scan_type: The scan_type of this ReImportScan.  # noqa: E501
        :type: str
        """
        if scan_type is None:
            raise ValueError("Invalid value for `scan_type`, must not be `None`")  # noqa: E501
        allowed_values = ["", "Netsparker Scan", "Burp Scan", "Nessus Scan", "Nmap Scan", "Nexpose Scan", "AppSpider Scan", "Veracode Scan", "Checkmarx Scan", "Crashtest Security Scan", "ZAP Scan", "Arachni Scan", "VCG Scan", "Dependency Check Scan", "Dependency Track Finding Packaging Format (FPF) Export", "Retire.js Scan", "Node Security Platform Scan", "NPM Audit Scan", "Qualys Scan", "Qualys Webapp Scan", "OpenVAS CSV", "Snyk Scan", "Generic Findings Import", "Trustwave Scan (CSV)", "SKF Scan", "Clair Klar Scan", "Bandit Scan", "SSL Labs Scan", "Acunetix Scan", "Fortify Scan", "Gosec Scanner", "SonarQube Scan", "SonarQube API Import", "MobSF Scan", "Trufflehog Scan", "Nikto Scan", "Clair Scan", "Brakeman Scan", "SpotBugs Scan", "AWS Scout2 Scan", "AWS Prowler Scan", "IBM AppScan DAST", "PHP Security Audit v2", "PHP Symfony Security Check", "Safety Scan", "DawnScanner Scan", "Anchore Engine Scan", "Bundler-Audit Scan", "Twistlock Image Scan", "Kiuwan Scan", "Blackduck Hub Scan", "Openscap Vulnerability Scan", "Wapiti Scan", "Immuniweb Scan", "Sonatype Application Scan", "Cobalt.io Scan", "Mozilla Observatory Scan", "Whitesource Scan", "Contrast Scan", "Microfocus Webinspect Scan", "Wpscan", "Sslscan", "JFrog Xray Scan", "Sslyze Scan", "Testssl Scan", "Hadolint Dockerfile check", "Aqua Scan"]  # noqa: E501
        if scan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(scan_type, allowed_values)
            )

        self._scan_type = scan_type

    @property
    def tags(self):
        """Gets the tags of this ReImportScan.  # noqa: E501


        :return: The tags of this ReImportScan.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReImportScan.


        :param tags: The tags of this ReImportScan.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def file(self):
        """Gets the file of this ReImportScan.  # noqa: E501


        :return: The file of this ReImportScan.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ReImportScan.


        :param file: The file of this ReImportScan.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def test(self):
        """Gets the test of this ReImportScan.  # noqa: E501


        :return: The test of this ReImportScan.  # noqa: E501
        :rtype: int
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ReImportScan.


        :param test: The test of this ReImportScan.  # noqa: E501
        :type: int
        """
        if test is None:
            raise ValueError("Invalid value for `test`, must not be `None`")  # noqa: E501

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReImportScan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
